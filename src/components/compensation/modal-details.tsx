import { Button, Modal } from 'flowbite-react';
import { CreativeGroup } from './types';
import { useEffect, useState } from 'react';
import { getCreativeByGroup } from '../../services/campaign';
import { dateDisplay } from '../../helpers/date-display';
import { formatNumber } from '../../helpers/format-number';

const ModalDetails = ({
  isOpen,
  closeModal,
  creativeGroup,
}: ModalDetailsProps) => {
  const [creatives, setCreatives] = useState([]);
  useEffect(() => {
    const idCreativeGroup = creativeGroup.id;
    getCreatives(idCreativeGroup);
  }, [creativeGroup.id]);

  const getCreatives = async (id: string) => {
    const creativeGroup = await getCreativeByGroup(id);
    setCreatives(creativeGroup.creatives);
  };

  return (
    <Modal show={isOpen} size="3xl" onClose={() => {}} popup>
      <Modal.Body className="flex flex-col gap-4">
        <h3 className="mt-8  flex gap-2 items-center text-[#728595]">
          Detalles de los creativos de la campaña a compensar
        </h3>
        <hr />
        <div className="flex flex-wrap gap-2">
          <p className="">
            <b>Fechas de emisión:</b> {dateDisplay(creativeGroup.startDate)} a{' '}
            {dateDisplay(creativeGroup.endDate)}
          </p>
          <p className="w-1/2">
            <b>Impresiones totales:</b>{' '}
            {formatNumber(+creativeGroup.impressions)}
          </p>
          <p>
            <b>Emisiones totales:</b> {formatNumber(creativeGroup.emissions)}Kg
          </p>
        </div>

        {creatives &&
          creatives.map((creative: Creative) => (
            <div key={creative.id} className="flex gap-4 mt-4">
              <div className="flex w-full flex-col gap-2">
                <h4 className="text-[#FFAB49]">Creativo: {creative.id}</h4>
                <hr />
                <div className="flex gap-2 justify-around">
                  <div className="flex w-1/2 flex-col gap-2 ">
                    <p>
                      <b>Impresiones:</b> {formatNumber(+creative.impressions)}
                    </p>
                    <p>
                      <b>Emisiones:</b> {formatNumber(+creative.emissions)}Kg
                    </p>
                    <p>
                      <b>Media Type:</b> {creative.mediaType}
                    </p>
                    <p>
                      <b>Device Type:</b> {creative.deviceType}
                    </p>
                  </div>
                  <div className="flex  w-1/2  flex-col gap-2 overflow-scroll max-h-56 ">
                    {creative.emissionsData &&
                      Object.keys(creative.emissionsData).map((key) => (
                        <p key={key}>
                          <b>{key}:</b>{' '}
                          {
                            creative.emissionsData[
                              key as keyof typeof creative.emissionsData
                            ]
                          }
                        </p>
                      ))}
                  </div>
                </div>
              </div>
            </div>
          ))}
        <div className="flex justify-center gap-4 mt-8">
          <Button color="gray" onClick={() => closeModal(false)}>
            Salir
          </Button>
        </div>
      </Modal.Body>
    </Modal>
  );
};
export default ModalDetails;

interface ModalDetailsProps {
  isOpen: boolean;
  closeModal: (value: boolean) => void;
  creativeGroup: CreativeGroup;
}
// Generated by https://quicktype.io

export interface Creative {
  id: string;
  impressions: string;
  emissions: string;
  mediaType: string;
  deviceType: string;
  emissionsData: object;
  createdAt: string;
  updatedAt: string;
}
